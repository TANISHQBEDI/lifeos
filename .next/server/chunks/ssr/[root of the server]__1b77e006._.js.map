{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///Users/tanishqbedi/Documents/Projects/kageyama/lifeos/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\n// Ensure the API key is being read from the environment variable\nconst apiKey = process.env.GOOGLE_GENAI_API_KEY;\n\nif (!apiKey) {\n  console.warn(\n    'GOOGLE_GENAI_API_KEY is not set. AI features will not work. Please set it in your .env file.'\n  );\n}\n\nexport const ai = genkit({\n  promptDir: './prompts', // This might not be used if prompts are defined in code\n  plugins: [\n    googleAI({\n      apiKey: apiKey, // Pass the apiKey variable here\n    }),\n  ],\n  // Default model for general text generation, can be overridden in specific prompts/flows\n  model: 'googleai/gemini-1.5-flash', // Changed to 1.5-flash as 2.0-flash is experimental for image gen\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEA,iEAAiE;AACjE,MAAM,SAAS,QAAQ,GAAG,CAAC,oBAAoB;AAE/C,IAAI,CAAC,QAAQ;IACX,QAAQ,IAAI,CACV;AAEJ;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ;QACV;KACD;IACD,yFAAyF;IACzF,OAAO;AACT","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///Users/tanishqbedi/Documents/Projects/kageyama/lifeos/src/ai/flows/goal-breakdown-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview AI-powered goal breakdown into actionable tasks.\n *\n * - breakDownGoalIntoTasks - Function to generate tasks from a goal description.\n * - BreakDownGoalInput - Input type for the breakDownGoalIntoTasks function.\n * - BreakDownGoalOutput - Return type for the breakDownGoalIntoTasks function.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\n// --- Input Schema ---\nconst BreakDownGoalInputSchema = z.object({\n  goalName: z.string().describe('The name or title of the goal.'),\n  goalDescription: z.string().optional().describe('A detailed description of the goal (optional but recommended).'),\n  // Could add more context later, like existing tasks, user preferences etc.\n});\nexport type BreakDownGoalInput = z.infer<typeof BreakDownGoalInputSchema>;\n\n// --- Output Schema ---\nconst BreakDownGoalOutputSchema = z.object({\n  tasks: z.array(z.string()).describe('An array of suggested actionable task descriptions (strings) to achieve the goal.'),\n});\nexport type BreakDownGoalOutput = z.infer<typeof BreakDownGoalOutputSchema>;\n\n// --- Exported Wrapper Function ---\nexport async function breakDownGoalIntoTasks(input: BreakDownGoalInput): Promise<BreakDownGoalOutput> {\n  console.log(`[breakDownGoalIntoTasks] Request received for goal: ${input.goalName}`);\n  try {\n      const result = await breakDownGoalFlow(input);\n      console.log(`[breakDownGoalIntoTasks] Flow completed. Generated ${result.tasks?.length ?? 0} tasks.`);\n      return result;\n  } catch (error) {\n      console.error('[breakDownGoalIntoTasks] Error calling flow:', error);\n      throw error; // Re-throw for the calling component\n  }\n}\n\n// --- AI Prompt Definition ---\nconst prompt = ai.definePrompt({\n  name: 'breakDownGoalPrompt',\n  input: {\n    schema: BreakDownGoalInputSchema,\n  },\n  output: {\n    schema: BreakDownGoalOutputSchema,\n    format: 'json' // Ensure structured JSON output\n  },\n  prompt: `You are an expert productivity assistant specializing in breaking down goals into smaller, actionable tasks.\n\n  Goal Name: {{{goalName}}}\n  {{#if goalDescription}}\n  Goal Description: {{{goalDescription}}}\n  {{/if}}\n\n  Based on the provided goal name and description, generate a list of specific, actionable tasks that need to be completed to achieve this goal.\n  Each task should be a clear, concise instruction starting with an action verb (e.g., \"Research...\", \"Draft...\", \"Schedule...\", \"Complete...\").\n  Generate a reasonable number of tasks (typically 3-10) that represent the key steps. Avoid being overly granular or too high-level.\n\n  Respond ONLY with a JSON object containing a single key \"tasks\", which is an array of strings representing the task descriptions. Do not include any introductory text, explanations, or markdown formatting.\n\n  Example Input:\n  Goal Name: \"Learn React Basics\"\n  Goal Description: \"Understand core React concepts like components, state, props, and hooks to build simple web applications.\"\n\n  Example Output:\n  {\n    \"tasks\": [\n      \"Complete the official React tutorial (react.dev)\",\n      \"Build a simple counter application using useState hook\",\n      \"Create a component that accepts and displays props\",\n      \"Learn about conditional rendering in React\",\n      \"Experiment with the useEffect hook for side effects\",\n      \"Read documentation on React Router for navigation\"\n    ]\n  }\n\n  Now, generate the tasks for the provided goal.\n  `,\n  // Consider using a slightly more capable model if needed, but flash should be okay\n  // model: 'googleai/gemini-1.5-flash',\n});\n\n// --- Genkit Flow Definition ---\nconst breakDownGoalFlow = ai.defineFlow<\n  typeof BreakDownGoalInputSchema,\n  typeof BreakDownGoalOutputSchema\n>({\n  name: 'breakDownGoalFlow',\n  inputSchema: BreakDownGoalInputSchema,\n  outputSchema: BreakDownGoalOutputSchema,\n}, async (input) => {\n  console.log('[breakDownGoalFlow] Starting flow execution...');\n  try {\n    const { output, usage } = await prompt(input);\n    console.log('[breakDownGoalFlow] AI prompt call completed. Usage:', usage);\n\n    if (!output || !Array.isArray(output.tasks)) {\n      console.error('[breakDownGoalFlow] AI failed to return a valid response structure. Output:', output);\n      throw new Error(\"AI failed to generate tasks. Invalid response format.\");\n    }\n\n     // Filter out any empty strings just in case\n     const validTasks = output.tasks.filter(task => typeof task === 'string' && task.trim() !== '');\n\n    console.log(`[breakDownGoalFlow] Task generation successful. Found ${validTasks.length} valid tasks.`);\n    return { tasks: validTasks };\n\n  } catch (error) {\n    console.error('[breakDownGoalFlow] Error during prompt execution:', error);\n    throw new Error(`AI prompt failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n});\n\n// Wrapper function breakDownGoalIntoTasks is exported for use in server actions.\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,uBAAuB;AACvB,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAElD;AAGA,wBAAwB;AACxB,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,OAAO,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACtC;AAIO,eAAe,uCAAoB,GAApB,uBAAuB,KAAyB;IACpE,QAAQ,GAAG,CAAC,CAAC,oDAAoD,EAAE,MAAM,QAAQ,EAAE;IACnF,IAAI;QACA,MAAM,SAAS,MAAM,kBAAkB;QACvC,QAAQ,GAAG,CAAC,CAAC,mDAAmD,EAAE,OAAO,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC;QACpG,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gDAAgD;QAC9D,MAAM,OAAO,qCAAqC;IACtD;AACF;AAEA,+BAA+B;AAC/B,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ;IACV;IACA,QAAQ;QACN,QAAQ;QACR,QAAQ,OAAO,gCAAgC;IACjD;IACA,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BT,CAAC;AAGH;AAEA,iCAAiC;AACjC,MAAM,oBAAoB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAGrC;IACA,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GAAG,OAAO;IACR,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO;QACvC,QAAQ,GAAG,CAAC,wDAAwD;QAEpE,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,OAAO,KAAK,GAAG;YAC3C,QAAQ,KAAK,CAAC,+EAA+E;YAC7F,MAAM,IAAI,MAAM;QAClB;QAEC,4CAA4C;QAC5C,MAAM,aAAa,OAAO,KAAK,CAAC,MAAM,CAAC,CAAA,OAAQ,OAAO,SAAS,YAAY,KAAK,IAAI,OAAO;QAE5F,QAAQ,GAAG,CAAC,CAAC,sDAAsD,EAAE,WAAW,MAAM,CAAC,aAAa,CAAC;QACrG,OAAO;YAAE,OAAO;QAAW;IAE7B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sDAAsD;QACpE,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO,QAAQ;IAC/F;AACF,IAEA,iFAAiF;;;IAxF3D;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":["file:///Users/tanishqbedi/Documents/Projects/kageyama/lifeos/src/app/goals/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/goals/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/goals/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///Users/tanishqbedi/Documents/Projects/kageyama/lifeos/src/app/goals/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/goals/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/goals/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}